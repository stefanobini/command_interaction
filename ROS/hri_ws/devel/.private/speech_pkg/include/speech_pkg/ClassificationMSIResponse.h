// Generated by gencpp from file speech_pkg/ClassificationMSIResponse.msg
// DO NOT EDIT!


#ifndef SPEECH_PKG_MESSAGE_CLASSIFICATIONMSIRESPONSE_H
#define SPEECH_PKG_MESSAGE_CLASSIFICATIONMSIRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace speech_pkg
{
template <class ContainerAllocator>
struct ClassificationMSIResponse_
{
  typedef ClassificationMSIResponse_<ContainerAllocator> Type;

  ClassificationMSIResponse_()
    : intent(0)
    , int_probs()
    , explicit(0)
    , exp_probs()
    , implicit(0)
    , imp_probs()  {
    }
  ClassificationMSIResponse_(const ContainerAllocator& _alloc)
    : intent(0)
    , int_probs(_alloc)
    , explicit(0)
    , exp_probs(_alloc)
    , implicit(0)
    , imp_probs(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _intent_type;
  _intent_type intent;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _int_probs_type;
  _int_probs_type int_probs;

   typedef int8_t _explicit_type;
  _explicit_type explicit;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _exp_probs_type;
  _exp_probs_type exp_probs;

   typedef int8_t _implicit_type;
  _implicit_type implicit;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _imp_probs_type;
  _imp_probs_type imp_probs;





  typedef boost::shared_ptr< ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ClassificationMSIResponse_

typedef ::speech_pkg::ClassificationMSIResponse_<std::allocator<void> > ClassificationMSIResponse;

typedef boost::shared_ptr< ::speech_pkg::ClassificationMSIResponse > ClassificationMSIResponsePtr;
typedef boost::shared_ptr< ::speech_pkg::ClassificationMSIResponse const> ClassificationMSIResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator1> & lhs, const ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator2> & rhs)
{
  return lhs.intent == rhs.intent &&
    lhs.int_probs == rhs.int_probs &&
    lhs.explicit == rhs.explicit &&
    lhs.exp_probs == rhs.exp_probs &&
    lhs.implicit == rhs.implicit &&
    lhs.imp_probs == rhs.imp_probs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator1> & lhs, const ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace speech_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93f46f730242eecddbf7b7d028f5e49b";
  }

  static const char* value(const ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93f46f730242eecdULL;
  static const uint64_t static_value2 = 0xdbf7b7d028f5e49bULL;
};

template<class ContainerAllocator>
struct DataType< ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "speech_pkg/ClassificationMSIResponse";
  }

  static const char* value(const ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 intent\n"
"float32[] int_probs\n"
"int8 explicit\n"
"float32[] exp_probs\n"
"int8 implicit\n"
"float32[] imp_probs\n"
;
  }

  static const char* value(const ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.intent);
      stream.next(m.int_probs);
      stream.next(m.explicit);
      stream.next(m.exp_probs);
      stream.next(m.implicit);
      stream.next(m.imp_probs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClassificationMSIResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::speech_pkg::ClassificationMSIResponse_<ContainerAllocator>& v)
  {
    s << indent << "intent: ";
    Printer<int8_t>::stream(s, indent + "  ", v.intent);
    s << indent << "int_probs[]" << std::endl;
    for (size_t i = 0; i < v.int_probs.size(); ++i)
    {
      s << indent << "  int_probs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.int_probs[i]);
    }
    s << indent << "explicit: ";
    Printer<int8_t>::stream(s, indent + "  ", v.explicit);
    s << indent << "exp_probs[]" << std::endl;
    for (size_t i = 0; i < v.exp_probs.size(); ++i)
    {
      s << indent << "  exp_probs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.exp_probs[i]);
    }
    s << indent << "implicit: ";
    Printer<int8_t>::stream(s, indent + "  ", v.implicit);
    s << indent << "imp_probs[]" << std::endl;
    for (size_t i = 0; i < v.imp_probs.size(); ++i)
    {
      s << indent << "  imp_probs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.imp_probs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPEECH_PKG_MESSAGE_CLASSIFICATIONMSIRESPONSE_H
