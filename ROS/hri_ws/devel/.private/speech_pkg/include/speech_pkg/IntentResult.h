// Generated by gencpp from file speech_pkg/IntentResult.msg
// DO NOT EDIT!


#ifndef SPEECH_PKG_MESSAGE_INTENTRESULT_H
#define SPEECH_PKG_MESSAGE_INTENTRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace speech_pkg
{
template <class ContainerAllocator>
struct IntentResult_
{
  typedef IntentResult_<ContainerAllocator> Type;

  IntentResult_()
    : time_elapsed()
    , updates_n(0)  {
    }
  IntentResult_(const ContainerAllocator& _alloc)
    : time_elapsed()
    , updates_n(0)  {
  (void)_alloc;
    }



   typedef ros::Duration _time_elapsed_type;
  _time_elapsed_type time_elapsed;

   typedef uint32_t _updates_n_type;
  _updates_n_type updates_n;





  typedef boost::shared_ptr< ::speech_pkg::IntentResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::speech_pkg::IntentResult_<ContainerAllocator> const> ConstPtr;

}; // struct IntentResult_

typedef ::speech_pkg::IntentResult_<std::allocator<void> > IntentResult;

typedef boost::shared_ptr< ::speech_pkg::IntentResult > IntentResultPtr;
typedef boost::shared_ptr< ::speech_pkg::IntentResult const> IntentResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::speech_pkg::IntentResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::speech_pkg::IntentResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::speech_pkg::IntentResult_<ContainerAllocator1> & lhs, const ::speech_pkg::IntentResult_<ContainerAllocator2> & rhs)
{
  return lhs.time_elapsed == rhs.time_elapsed &&
    lhs.updates_n == rhs.updates_n;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::speech_pkg::IntentResult_<ContainerAllocator1> & lhs, const ::speech_pkg::IntentResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace speech_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::speech_pkg::IntentResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::speech_pkg::IntentResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::speech_pkg::IntentResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::speech_pkg::IntentResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::speech_pkg::IntentResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::speech_pkg::IntentResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::speech_pkg::IntentResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec7b9dd60f0cbf3a48147f1dd0e2c305";
  }

  static const char* value(const ::speech_pkg::IntentResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec7b9dd60f0cbf3aULL;
  static const uint64_t static_value2 = 0x48147f1dd0e2c305ULL;
};

template<class ContainerAllocator>
struct DataType< ::speech_pkg::IntentResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "speech_pkg/IntentResult";
  }

  static const char* value(const ::speech_pkg::IntentResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::speech_pkg::IntentResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Part 2: the result, sent by action server unpon completion\n"
"#\n"
"# How much time used\n"
"duration time_elapsed\n"
"# How many updates thrown in total\n"
"uint32 updates_n\n"
;
  }

  static const char* value(const ::speech_pkg::IntentResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::speech_pkg::IntentResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_elapsed);
      stream.next(m.updates_n);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IntentResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::speech_pkg::IntentResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::speech_pkg::IntentResult_<ContainerAllocator>& v)
  {
    s << indent << "time_elapsed: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.time_elapsed);
    s << indent << "updates_n: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.updates_n);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPEECH_PKG_MESSAGE_INTENTRESULT_H
