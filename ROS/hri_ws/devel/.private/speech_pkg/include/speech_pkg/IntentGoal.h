// Generated by gencpp from file speech_pkg/IntentGoal.msg
// DO NOT EDIT!


#ifndef SPEECH_PKG_MESSAGE_INTENTGOAL_H
#define SPEECH_PKG_MESSAGE_INTENTGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace speech_pkg
{
template <class ContainerAllocator>
struct IntentGoal_
{
  typedef IntentGoal_<ContainerAllocator> Type;

  IntentGoal_()
    : intent(0)  {
    }
  IntentGoal_(const ContainerAllocator& _alloc)
    : intent(0)  {
  (void)_alloc;
    }



   typedef uint8_t _intent_type;
  _intent_type intent;





  typedef boost::shared_ptr< ::speech_pkg::IntentGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::speech_pkg::IntentGoal_<ContainerAllocator> const> ConstPtr;

}; // struct IntentGoal_

typedef ::speech_pkg::IntentGoal_<std::allocator<void> > IntentGoal;

typedef boost::shared_ptr< ::speech_pkg::IntentGoal > IntentGoalPtr;
typedef boost::shared_ptr< ::speech_pkg::IntentGoal const> IntentGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::speech_pkg::IntentGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::speech_pkg::IntentGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::speech_pkg::IntentGoal_<ContainerAllocator1> & lhs, const ::speech_pkg::IntentGoal_<ContainerAllocator2> & rhs)
{
  return lhs.intent == rhs.intent;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::speech_pkg::IntentGoal_<ContainerAllocator1> & lhs, const ::speech_pkg::IntentGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace speech_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::speech_pkg::IntentGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::speech_pkg::IntentGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::speech_pkg::IntentGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::speech_pkg::IntentGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::speech_pkg::IntentGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::speech_pkg::IntentGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::speech_pkg::IntentGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cd0d52ef49a3bd3e6f56af43958b6723";
  }

  static const char* value(const ::speech_pkg::IntentGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcd0d52ef49a3bd3eULL;
  static const uint64_t static_value2 = 0x6f56af43958b6723ULL;
};

template<class ContainerAllocator>
struct DataType< ::speech_pkg::IntentGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "speech_pkg/IntentGoal";
  }

  static const char* value(const ::speech_pkg::IntentGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::speech_pkg::IntentGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# This is an action definition file, which has three parts: the goal\n"
"# the result, and the feedback.\n"
"# Part 1: the goal.\n"
"#\n"
"# The ID of the intent\n"
"uint8 intent\n"
;
  }

  static const char* value(const ::speech_pkg::IntentGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::speech_pkg::IntentGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.intent);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IntentGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::speech_pkg::IntentGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::speech_pkg::IntentGoal_<ContainerAllocator>& v)
  {
    s << indent << "intent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.intent);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPEECH_PKG_MESSAGE_INTENTGOAL_H
