# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from speech_pkg/ClassificationMSIRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import speech_pkg.msg

class ClassificationMSIRequest(genpy.Message):
  _md5sum = "21e1815396969a6f82c0ae7d856b83d3"
  _type = "speech_pkg/ClassificationMSIRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """speech_pkg/SpeechData data

================================================================================
MSG: speech_pkg/SpeechData
int16[] data
int16 doa
float64 start_time
float64 end_time"""
  __slots__ = ['data']
  _slot_types = ['speech_pkg/SpeechData']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ClassificationMSIRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.data is None:
        self.data = speech_pkg.msg.SpeechData()
    else:
      self.data = speech_pkg.msg.SpeechData()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.data.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.data.data))
      _x = self
      buff.write(_get_struct_h2d().pack(_x.data.doa, _x.data.start_time, _x.data.end_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.data is None:
        self.data = speech_pkg.msg.SpeechData()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.data.data = s.unpack(str[start:end])
      _x = self
      start = end
      end += 18
      (_x.data.doa, _x.data.start_time, _x.data.end_time,) = _get_struct_h2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.data.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.data.data.tostring())
      _x = self
      buff.write(_get_struct_h2d().pack(_x.data.doa, _x.data.start_time, _x.data.end_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.data is None:
        self.data = speech_pkg.msg.SpeechData()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.data.data = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      _x = self
      start = end
      end += 18
      (_x.data.doa, _x.data.start_time, _x.data.end_time,) = _get_struct_h2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h2d = None
def _get_struct_h2d():
    global _struct_h2d
    if _struct_h2d is None:
        _struct_h2d = struct.Struct("<h2d")
    return _struct_h2d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from speech_pkg/ClassificationMSIResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ClassificationMSIResponse(genpy.Message):
  _md5sum = "93f46f730242eecddbf7b7d028f5e49b"
  _type = "speech_pkg/ClassificationMSIResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int8 intent
float32[] int_probs
int8 explicit
float32[] exp_probs
int8 implicit
float32[] imp_probs
"""
  __slots__ = ['intent','int_probs','explicit','exp_probs','implicit','imp_probs']
  _slot_types = ['int8','float32[]','int8','float32[]','int8','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       intent,int_probs,explicit,exp_probs,implicit,imp_probs

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ClassificationMSIResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.intent is None:
        self.intent = 0
      if self.int_probs is None:
        self.int_probs = []
      if self.explicit is None:
        self.explicit = 0
      if self.exp_probs is None:
        self.exp_probs = []
      if self.implicit is None:
        self.implicit = 0
      if self.imp_probs is None:
        self.imp_probs = []
    else:
      self.intent = 0
      self.int_probs = []
      self.explicit = 0
      self.exp_probs = []
      self.implicit = 0
      self.imp_probs = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.intent
      buff.write(_get_struct_b().pack(_x))
      length = len(self.int_probs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.int_probs))
      _x = self.explicit
      buff.write(_get_struct_b().pack(_x))
      length = len(self.exp_probs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.exp_probs))
      _x = self.implicit
      buff.write(_get_struct_b().pack(_x))
      length = len(self.imp_probs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.imp_probs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.intent,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.int_probs = s.unpack(str[start:end])
      start = end
      end += 1
      (self.explicit,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.exp_probs = s.unpack(str[start:end])
      start = end
      end += 1
      (self.implicit,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.imp_probs = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.intent
      buff.write(_get_struct_b().pack(_x))
      length = len(self.int_probs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.int_probs.tostring())
      _x = self.explicit
      buff.write(_get_struct_b().pack(_x))
      length = len(self.exp_probs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.exp_probs.tostring())
      _x = self.implicit
      buff.write(_get_struct_b().pack(_x))
      length = len(self.imp_probs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.imp_probs.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.intent,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.int_probs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 1
      (self.explicit,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.exp_probs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 1
      (self.implicit,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.imp_probs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
class ClassificationMSI(object):
  _type          = 'speech_pkg/ClassificationMSI'
  _md5sum = '86bdd504432c8f4cd29e4aa496bd70a0'
  _request_class  = ClassificationMSIRequest
  _response_class = ClassificationMSIResponse
