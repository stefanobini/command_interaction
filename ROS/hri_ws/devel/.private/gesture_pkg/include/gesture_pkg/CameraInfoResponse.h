// Generated by gencpp from file gesture_pkg/CameraInfoResponse.msg
// DO NOT EDIT!


#ifndef GESTURE_PKG_MESSAGE_CAMERAINFORESPONSE_H
#define GESTURE_PKG_MESSAGE_CAMERAINFORESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gesture_pkg
{
template <class ContainerAllocator>
struct CameraInfoResponse_
{
  typedef CameraInfoResponse_<ContainerAllocator> Type;

  CameraInfoResponse_()
    : width(0)
    , height(0)
    , hfov(0.0)
    , vfov(0.0)  {
    }
  CameraInfoResponse_(const ContainerAllocator& _alloc)
    : width(0)
    , height(0)
    , hfov(0.0)
    , vfov(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _width_type;
  _width_type width;

   typedef int64_t _height_type;
  _height_type height;

   typedef float _hfov_type;
  _hfov_type hfov;

   typedef float _vfov_type;
  _vfov_type vfov;





  typedef boost::shared_ptr< ::gesture_pkg::CameraInfoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gesture_pkg::CameraInfoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CameraInfoResponse_

typedef ::gesture_pkg::CameraInfoResponse_<std::allocator<void> > CameraInfoResponse;

typedef boost::shared_ptr< ::gesture_pkg::CameraInfoResponse > CameraInfoResponsePtr;
typedef boost::shared_ptr< ::gesture_pkg::CameraInfoResponse const> CameraInfoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gesture_pkg::CameraInfoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gesture_pkg::CameraInfoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gesture_pkg::CameraInfoResponse_<ContainerAllocator1> & lhs, const ::gesture_pkg::CameraInfoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.hfov == rhs.hfov &&
    lhs.vfov == rhs.vfov;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gesture_pkg::CameraInfoResponse_<ContainerAllocator1> & lhs, const ::gesture_pkg::CameraInfoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gesture_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gesture_pkg::CameraInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gesture_pkg::CameraInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gesture_pkg::CameraInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gesture_pkg::CameraInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gesture_pkg::CameraInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gesture_pkg::CameraInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gesture_pkg::CameraInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e0f6cc9c6dfad0bee4253b15158a925";
  }

  static const char* value(const ::gesture_pkg::CameraInfoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e0f6cc9c6dfad0bULL;
  static const uint64_t static_value2 = 0xee4253b15158a925ULL;
};

template<class ContainerAllocator>
struct DataType< ::gesture_pkg::CameraInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gesture_pkg/CameraInfoResponse";
  }

  static const char* value(const ::gesture_pkg::CameraInfoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gesture_pkg::CameraInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 width\n"
"int64 height\n"
"float32 hfov\n"
"float32 vfov\n"
;
  }

  static const char* value(const ::gesture_pkg::CameraInfoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gesture_pkg::CameraInfoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.hfov);
      stream.next(m.vfov);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CameraInfoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gesture_pkg::CameraInfoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gesture_pkg::CameraInfoResponse_<ContainerAllocator>& v)
  {
    s << indent << "width: ";
    Printer<int64_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int64_t>::stream(s, indent + "  ", v.height);
    s << indent << "hfov: ";
    Printer<float>::stream(s, indent + "  ", v.hfov);
    s << indent << "vfov: ";
    Printer<float>::stream(s, indent + "  ", v.vfov);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GESTURE_PKG_MESSAGE_CAMERAINFORESPONSE_H
