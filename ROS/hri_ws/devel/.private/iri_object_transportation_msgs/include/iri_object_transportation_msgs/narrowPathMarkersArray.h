// Generated by gencpp from file iri_object_transportation_msgs/narrowPathMarkersArray.msg
// DO NOT EDIT!


#ifndef IRI_OBJECT_TRANSPORTATION_MSGS_MESSAGE_NARROWPATHMARKERSARRAY_H
#define IRI_OBJECT_TRANSPORTATION_MSGS_MESSAGE_NARROWPATHMARKERSARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/Bool.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/WrenchStamped.h>
#include <geometry_msgs/PoseStamped.h>

namespace iri_object_transportation_msgs
{
template <class ContainerAllocator>
struct narrowPathMarkersArray_
{
  typedef narrowPathMarkersArray_<ContainerAllocator> Type;

  narrowPathMarkersArray_()
    : header()
    , marker_valid_array()
    , marker_pose_array()
    , marker_wrench_array()
    , marker_goal_array()  {
    }
  narrowPathMarkersArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , marker_valid_array(_alloc)
    , marker_pose_array(_alloc)
    , marker_wrench_array(_alloc)
    , marker_goal_array(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::std_msgs::Bool_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::std_msgs::Bool_<ContainerAllocator> >> _marker_valid_array_type;
  _marker_valid_array_type marker_valid_array;

   typedef std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::PoseStamped_<ContainerAllocator> >> _marker_pose_array_type;
  _marker_pose_array_type marker_pose_array;

   typedef std::vector< ::geometry_msgs::WrenchStamped_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::WrenchStamped_<ContainerAllocator> >> _marker_wrench_array_type;
  _marker_wrench_array_type marker_wrench_array;

   typedef std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::PoseStamped_<ContainerAllocator> >> _marker_goal_array_type;
  _marker_goal_array_type marker_goal_array;





  typedef boost::shared_ptr< ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator> const> ConstPtr;

}; // struct narrowPathMarkersArray_

typedef ::iri_object_transportation_msgs::narrowPathMarkersArray_<std::allocator<void> > narrowPathMarkersArray;

typedef boost::shared_ptr< ::iri_object_transportation_msgs::narrowPathMarkersArray > narrowPathMarkersArrayPtr;
typedef boost::shared_ptr< ::iri_object_transportation_msgs::narrowPathMarkersArray const> narrowPathMarkersArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator1> & lhs, const ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.marker_valid_array == rhs.marker_valid_array &&
    lhs.marker_pose_array == rhs.marker_pose_array &&
    lhs.marker_wrench_array == rhs.marker_wrench_array &&
    lhs.marker_goal_array == rhs.marker_goal_array;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator1> & lhs, const ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iri_object_transportation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e651f252e9d70e2375713d846ee9b4ad";
  }

  static const char* value(const ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe651f252e9d70e23ULL;
  static const uint64_t static_value2 = 0x75713d846ee9b4adULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iri_object_transportation_msgs/narrowPathMarkersArray";
  }

  static const char* value(const ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"std_msgs/Bool[] marker_valid_array\n"
"geometry_msgs/PoseStamped[] marker_pose_array\n"
"geometry_msgs/WrenchStamped[] marker_wrench_array\n"
"geometry_msgs/PoseStamped[] marker_goal_array\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/WrenchStamped\n"
"# A wrench with reference coordinate frame and timestamp\n"
"Header header\n"
"Wrench wrench\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.marker_valid_array);
      stream.next(m.marker_pose_array);
      stream.next(m.marker_wrench_array);
      stream.next(m.marker_goal_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct narrowPathMarkersArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iri_object_transportation_msgs::narrowPathMarkersArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "marker_valid_array[]" << std::endl;
    for (size_t i = 0; i < v.marker_valid_array.size(); ++i)
    {
      s << indent << "  marker_valid_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "    ", v.marker_valid_array[i]);
    }
    s << indent << "marker_pose_array[]" << std::endl;
    for (size_t i = 0; i < v.marker_pose_array.size(); ++i)
    {
      s << indent << "  marker_pose_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.marker_pose_array[i]);
    }
    s << indent << "marker_wrench_array[]" << std::endl;
    for (size_t i = 0; i < v.marker_wrench_array.size(); ++i)
    {
      s << indent << "  marker_wrench_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::WrenchStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.marker_wrench_array[i]);
    }
    s << indent << "marker_goal_array[]" << std::endl;
    for (size_t i = 0; i < v.marker_goal_array.size(); ++i)
    {
      s << indent << "  marker_goal_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.marker_goal_array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IRI_OBJECT_TRANSPORTATION_MSGS_MESSAGE_NARROWPATHMARKERSARRAY_H
