// Generated by gencpp from file iri_object_transportation_msgs/localForcesSFM.msg
// DO NOT EDIT!


#ifndef IRI_OBJECT_TRANSPORTATION_MSGS_MESSAGE_LOCALFORCESSFM_H
#define IRI_OBJECT_TRANSPORTATION_MSGS_MESSAGE_LOCALFORCESSFM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/WrenchStamped.h>
#include <geometry_msgs/WrenchStamped.h>
#include <iri_object_transportation_msgs/wrenchStampedArray.h>
#include <geometry_msgs/WrenchStamped.h>

namespace iri_object_transportation_msgs
{
template <class ContainerAllocator>
struct localForcesSFM_
{
  typedef localForcesSFM_<ContainerAllocator> Type;

  localForcesSFM_()
    : header()
    , goal_force()
    , attractor_force()
    , obstacles_forces()
    , total_force()  {
    }
  localForcesSFM_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , goal_force(_alloc)
    , attractor_force(_alloc)
    , obstacles_forces(_alloc)
    , total_force(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::WrenchStamped_<ContainerAllocator>  _goal_force_type;
  _goal_force_type goal_force;

   typedef  ::geometry_msgs::WrenchStamped_<ContainerAllocator>  _attractor_force_type;
  _attractor_force_type attractor_force;

   typedef  ::iri_object_transportation_msgs::wrenchStampedArray_<ContainerAllocator>  _obstacles_forces_type;
  _obstacles_forces_type obstacles_forces;

   typedef  ::geometry_msgs::WrenchStamped_<ContainerAllocator>  _total_force_type;
  _total_force_type total_force;





  typedef boost::shared_ptr< ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator> const> ConstPtr;

}; // struct localForcesSFM_

typedef ::iri_object_transportation_msgs::localForcesSFM_<std::allocator<void> > localForcesSFM;

typedef boost::shared_ptr< ::iri_object_transportation_msgs::localForcesSFM > localForcesSFMPtr;
typedef boost::shared_ptr< ::iri_object_transportation_msgs::localForcesSFM const> localForcesSFMConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator1> & lhs, const ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.goal_force == rhs.goal_force &&
    lhs.attractor_force == rhs.attractor_force &&
    lhs.obstacles_forces == rhs.obstacles_forces &&
    lhs.total_force == rhs.total_force;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator1> & lhs, const ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iri_object_transportation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f1cd253465458d5a2c178d26ef88bcf8";
  }

  static const char* value(const ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf1cd253465458d5aULL;
  static const uint64_t static_value2 = 0x2c178d26ef88bcf8ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iri_object_transportation_msgs/localForcesSFM";
  }

  static const char* value(const ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"geometry_msgs/WrenchStamped goal_force\n"
"geometry_msgs/WrenchStamped attractor_force\n"
"iri_object_transportation_msgs/wrenchStampedArray obstacles_forces\n"
"geometry_msgs/WrenchStamped total_force\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/WrenchStamped\n"
"# A wrench with reference coordinate frame and timestamp\n"
"Header header\n"
"Wrench wrench\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: iri_object_transportation_msgs/wrenchStampedArray\n"
"Header header\n"
"geometry_msgs/WrenchStamped[] wrench_array\n"
;
  }

  static const char* value(const ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.goal_force);
      stream.next(m.attractor_force);
      stream.next(m.obstacles_forces);
      stream.next(m.total_force);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct localForcesSFM_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iri_object_transportation_msgs::localForcesSFM_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "goal_force: ";
    s << std::endl;
    Printer< ::geometry_msgs::WrenchStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_force);
    s << indent << "attractor_force: ";
    s << std::endl;
    Printer< ::geometry_msgs::WrenchStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.attractor_force);
    s << indent << "obstacles_forces: ";
    s << std::endl;
    Printer< ::iri_object_transportation_msgs::wrenchStampedArray_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacles_forces);
    s << indent << "total_force: ";
    s << std::endl;
    Printer< ::geometry_msgs::WrenchStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.total_force);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IRI_OBJECT_TRANSPORTATION_MSGS_MESSAGE_LOCALFORCESSFM_H
