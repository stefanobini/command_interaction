// Generated by gencpp from file speech_pkg/ClassificationMSIRequest.msg
// DO NOT EDIT!


#ifndef SPEECH_PKG_MESSAGE_CLASSIFICATIONMSIREQUEST_H
#define SPEECH_PKG_MESSAGE_CLASSIFICATIONMSIREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <speech_pkg/SpeechData.h>

namespace speech_pkg
{
template <class ContainerAllocator>
struct ClassificationMSIRequest_
{
  typedef ClassificationMSIRequest_<ContainerAllocator> Type;

  ClassificationMSIRequest_()
    : data()  {
    }
  ClassificationMSIRequest_(const ContainerAllocator& _alloc)
    : data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::speech_pkg::SpeechData_<ContainerAllocator>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ClassificationMSIRequest_

typedef ::speech_pkg::ClassificationMSIRequest_<std::allocator<void> > ClassificationMSIRequest;

typedef boost::shared_ptr< ::speech_pkg::ClassificationMSIRequest > ClassificationMSIRequestPtr;
typedef boost::shared_ptr< ::speech_pkg::ClassificationMSIRequest const> ClassificationMSIRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator1> & lhs, const ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator1> & lhs, const ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace speech_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "21e1815396969a6f82c0ae7d856b83d3";
  }

  static const char* value(const ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x21e1815396969a6fULL;
  static const uint64_t static_value2 = 0x82c0ae7d856b83d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "speech_pkg/ClassificationMSIRequest";
  }

  static const char* value(const ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "speech_pkg/SpeechData data\n"
"\n"
"================================================================================\n"
"MSG: speech_pkg/SpeechData\n"
"int16[] data\n"
"int16 doa\n"
"float64 start_time\n"
"float64 end_time\n"
;
  }

  static const char* value(const ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClassificationMSIRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::speech_pkg::ClassificationMSIRequest_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    s << std::endl;
    Printer< ::speech_pkg::SpeechData_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPEECH_PKG_MESSAGE_CLASSIFICATIONMSIREQUEST_H
