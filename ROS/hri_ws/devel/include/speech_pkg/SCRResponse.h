// Generated by gencpp from file speech_pkg/SCRResponse.msg
// DO NOT EDIT!


#ifndef SPEECH_PKG_MESSAGE_SCRRESPONSE_H
#define SPEECH_PKG_MESSAGE_SCRRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace speech_pkg
{
template <class ContainerAllocator>
struct SCRResponse_
{
  typedef SCRResponse_<ContainerAllocator> Type;

  SCRResponse_()
    : cmd(0)
    , probs()  {
    }
  SCRResponse_(const ContainerAllocator& _alloc)
    : cmd(0)
    , probs(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _cmd_type;
  _cmd_type cmd;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _probs_type;
  _probs_type probs;





  typedef boost::shared_ptr< ::speech_pkg::SCRResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::speech_pkg::SCRResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SCRResponse_

typedef ::speech_pkg::SCRResponse_<std::allocator<void> > SCRResponse;

typedef boost::shared_ptr< ::speech_pkg::SCRResponse > SCRResponsePtr;
typedef boost::shared_ptr< ::speech_pkg::SCRResponse const> SCRResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::speech_pkg::SCRResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::speech_pkg::SCRResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::speech_pkg::SCRResponse_<ContainerAllocator1> & lhs, const ::speech_pkg::SCRResponse_<ContainerAllocator2> & rhs)
{
  return lhs.cmd == rhs.cmd &&
    lhs.probs == rhs.probs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::speech_pkg::SCRResponse_<ContainerAllocator1> & lhs, const ::speech_pkg::SCRResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace speech_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::speech_pkg::SCRResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::speech_pkg::SCRResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::speech_pkg::SCRResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::speech_pkg::SCRResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::speech_pkg::SCRResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::speech_pkg::SCRResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::speech_pkg::SCRResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b530570166a9025ca374b3a6285b3928";
  }

  static const char* value(const ::speech_pkg::SCRResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb530570166a9025cULL;
  static const uint64_t static_value2 = 0xa374b3a6285b3928ULL;
};

template<class ContainerAllocator>
struct DataType< ::speech_pkg::SCRResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "speech_pkg/SCRResponse";
  }

  static const char* value(const ::speech_pkg::SCRResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::speech_pkg::SCRResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 cmd\n"
"float32[] probs\n"
;
  }

  static const char* value(const ::speech_pkg::SCRResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::speech_pkg::SCRResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.probs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SCRResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::speech_pkg::SCRResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::speech_pkg::SCRResponse_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cmd);
    s << indent << "probs[]" << std::endl;
    for (size_t i = 0; i < v.probs.size(); ++i)
    {
      s << indent << "  probs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.probs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPEECH_PKG_MESSAGE_SCRRESPONSE_H
