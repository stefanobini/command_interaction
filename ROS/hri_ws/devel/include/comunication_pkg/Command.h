// Generated by gencpp from file comunication_pkg/Command.msg
// DO NOT EDIT!


#ifndef COMUNICATION_PKG_MESSAGE_COMMAND_H
#define COMUNICATION_PKG_MESSAGE_COMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace comunication_pkg
{
template <class ContainerAllocator>
struct Command_
{
  typedef Command_<ContainerAllocator> Type;

  Command_()
    : label(0)
    , english()
    , italian()  {
    }
  Command_(const ContainerAllocator& _alloc)
    : label(0)
    , english(_alloc)
    , italian(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _label_type;
  _label_type label;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _english_type;
  _english_type english;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _italian_type;
  _italian_type italian;





  typedef boost::shared_ptr< ::comunication_pkg::Command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::comunication_pkg::Command_<ContainerAllocator> const> ConstPtr;

}; // struct Command_

typedef ::comunication_pkg::Command_<std::allocator<void> > Command;

typedef boost::shared_ptr< ::comunication_pkg::Command > CommandPtr;
typedef boost::shared_ptr< ::comunication_pkg::Command const> CommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::comunication_pkg::Command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::comunication_pkg::Command_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::comunication_pkg::Command_<ContainerAllocator1> & lhs, const ::comunication_pkg::Command_<ContainerAllocator2> & rhs)
{
  return lhs.label == rhs.label &&
    lhs.english == rhs.english &&
    lhs.italian == rhs.italian;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::comunication_pkg::Command_<ContainerAllocator1> & lhs, const ::comunication_pkg::Command_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace comunication_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::comunication_pkg::Command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::comunication_pkg::Command_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::comunication_pkg::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::comunication_pkg::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comunication_pkg::Command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comunication_pkg::Command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::comunication_pkg::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a48558522c26082d66040db118e6fd8";
  }

  static const char* value(const ::comunication_pkg::Command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a48558522c26082ULL;
  static const uint64_t static_value2 = 0xd66040db118e6fd8ULL;
};

template<class ContainerAllocator>
struct DataType< ::comunication_pkg::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "comunication_pkg/Command";
  }

  static const char* value(const ::comunication_pkg::Command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::comunication_pkg::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Identify the command detected by Speech/Command system, it contains the following information:\n"
"\n"
"# Numeric identifier associated with the command\n"
"uint32 label\n"
"# Textual description of the gesture, in English\n"
"string english\n"
"# Textual description of the gesture, in Italian\n"
"string italian\n"
;
  }

  static const char* value(const ::comunication_pkg::Command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::comunication_pkg::Command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.english);
      stream.next(m.italian);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::comunication_pkg::Command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::comunication_pkg::Command_<ContainerAllocator>& v)
  {
    s << indent << "label: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.label);
    s << indent << "english: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.english);
    s << indent << "italian: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.italian);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMUNICATION_PKG_MESSAGE_COMMAND_H
