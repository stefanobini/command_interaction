// Generated by gencpp from file comunication_pkg/Speech.msg
// DO NOT EDIT!


#ifndef COMUNICATION_PKG_MESSAGE_SPEECH_H
#define COMUNICATION_PKG_MESSAGE_SPEECH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <comunication_pkg/Command.h>

namespace comunication_pkg
{
template <class ContainerAllocator>
struct Speech_
{
  typedef Speech_<ContainerAllocator> Type;

  Speech_()
    : id()
    , type()
    , timestamp()
    , command()
    , confidence(0.0)  {
    }
  Speech_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , type(_alloc)
    , timestamp(_alloc)
    , command(_alloc)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _timestamp_type;
  _timestamp_type timestamp;

   typedef  ::comunication_pkg::Command_<ContainerAllocator>  _command_type;
  _command_type command;

   typedef float _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::comunication_pkg::Speech_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::comunication_pkg::Speech_<ContainerAllocator> const> ConstPtr;

}; // struct Speech_

typedef ::comunication_pkg::Speech_<std::allocator<void> > Speech;

typedef boost::shared_ptr< ::comunication_pkg::Speech > SpeechPtr;
typedef boost::shared_ptr< ::comunication_pkg::Speech const> SpeechConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::comunication_pkg::Speech_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::comunication_pkg::Speech_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::comunication_pkg::Speech_<ContainerAllocator1> & lhs, const ::comunication_pkg::Speech_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.type == rhs.type &&
    lhs.timestamp == rhs.timestamp &&
    lhs.command == rhs.command &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::comunication_pkg::Speech_<ContainerAllocator1> & lhs, const ::comunication_pkg::Speech_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace comunication_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::comunication_pkg::Speech_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::comunication_pkg::Speech_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::comunication_pkg::Speech_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::comunication_pkg::Speech_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comunication_pkg::Speech_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comunication_pkg::Speech_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::comunication_pkg::Speech_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c31bef49fddac6ccf19a75e92a735ec5";
  }

  static const char* value(const ::comunication_pkg::Speech_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc31bef49fddac6ccULL;
  static const uint64_t static_value2 = 0xf19a75e92a735ec5ULL;
};

template<class ContainerAllocator>
struct DataType< ::comunication_pkg::Speech_<ContainerAllocator> >
{
  static const char* value()
  {
    return "comunication_pkg/Speech";
  }

  static const char* value(const ::comunication_pkg::Speech_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::comunication_pkg::Speech_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# \n"
"\n"
"# Identify the complete Entity/topic name (UNISA.SpeechGestureAnalysis.Speech)\n"
"string id\n"
"# Identify the Entity/topic type (Speech)\n"
"string type\n"
"#Two-integer timestamp that is expressed as:\n"
"# * timestamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * timestamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"string timestamp\n"
"# Identify the command detected by Speech/Command system, it contains the following information:\n"
"# * Numeric identifier associated with the command\n"
"# * Textual description of the gesture, in English\n"
"# * Textual description of the gesture, in Italian\n"
"Command command\n"
"# Value between 0 and 1 which indicates the reliability in the command identification and classification\n"
"float32 confidence\n"
"================================================================================\n"
"MSG: comunication_pkg/Command\n"
"# Identify the command detected by Speech/Command system, it contains the following information:\n"
"\n"
"# Numeric identifier associated with the command\n"
"uint32 label\n"
"# Textual description of the gesture, in English\n"
"string english\n"
"# Textual description of the gesture, in Italian\n"
"string italian\n"
;
  }

  static const char* value(const ::comunication_pkg::Speech_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::comunication_pkg::Speech_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.timestamp);
      stream.next(m.command);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Speech_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::comunication_pkg::Speech_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::comunication_pkg::Speech_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "timestamp: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.timestamp);
    s << indent << "command: ";
    s << std::endl;
    Printer< ::comunication_pkg::Command_<ContainerAllocator> >::stream(s, indent + "  ", v.command);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMUNICATION_PKG_MESSAGE_SPEECH_H
