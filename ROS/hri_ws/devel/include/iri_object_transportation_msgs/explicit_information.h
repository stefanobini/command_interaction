// Generated by gencpp from file iri_object_transportation_msgs/explicit_information.msg
// DO NOT EDIT!


#ifndef IRI_OBJECT_TRANSPORTATION_MSGS_MESSAGE_EXPLICIT_INFORMATION_H
#define IRI_OBJECT_TRANSPORTATION_MSGS_MESSAGE_EXPLICIT_INFORMATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace iri_object_transportation_msgs
{
template <class ContainerAllocator>
struct explicit_information_
{
  typedef explicit_information_<ContainerAllocator> Type;

  explicit_information_()
    : header()
    , fsr_values()
    , sw_values()  {
      fsr_values.assign(0.0);

      sw_values.assign(false);
  }
  explicit_information_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , fsr_values()
    , sw_values()  {
  (void)_alloc;
      fsr_values.assign(0.0);

      sw_values.assign(false);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<double, 5>  _fsr_values_type;
  _fsr_values_type fsr_values;

   typedef boost::array<uint8_t, 5>  _sw_values_type;
  _sw_values_type sw_values;





  typedef boost::shared_ptr< ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator> const> ConstPtr;

}; // struct explicit_information_

typedef ::iri_object_transportation_msgs::explicit_information_<std::allocator<void> > explicit_information;

typedef boost::shared_ptr< ::iri_object_transportation_msgs::explicit_information > explicit_informationPtr;
typedef boost::shared_ptr< ::iri_object_transportation_msgs::explicit_information const> explicit_informationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator1> & lhs, const ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.fsr_values == rhs.fsr_values &&
    lhs.sw_values == rhs.sw_values;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator1> & lhs, const ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iri_object_transportation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator> >
{
  static const char* value()
  {
    return "62dc5f03f1a505652316491d926de860";
  }

  static const char* value(const ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x62dc5f03f1a50565ULL;
  static const uint64_t static_value2 = 0x2316491d926de860ULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iri_object_transportation_msgs/explicit_information";
  }

  static const char* value(const ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64[5] fsr_values\n"
"bool[5] sw_values\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.fsr_values);
      stream.next(m.sw_values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct explicit_information_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iri_object_transportation_msgs::explicit_information_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "fsr_values[]" << std::endl;
    for (size_t i = 0; i < v.fsr_values.size(); ++i)
    {
      s << indent << "  fsr_values[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.fsr_values[i]);
    }
    s << indent << "sw_values[]" << std::endl;
    for (size_t i = 0; i < v.sw_values.size(); ++i)
    {
      s << indent << "  sw_values[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.sw_values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IRI_OBJECT_TRANSPORTATION_MSGS_MESSAGE_EXPLICIT_INFORMATION_H
